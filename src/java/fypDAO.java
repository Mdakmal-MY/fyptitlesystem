


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author KaizoDono
 */
import javabean.users;
import java.sql.Connection;
import connection.connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javabean.booking;
import javabean.student;
import javabean.lecturer;
import javabean.fyp;

public class fypDAO 
{
    private static Connection con = null;
    
    public static String[] verifylogin(users u)
    {
        String userid = u.getUserid();
        String password = u.getPasswords();
        String[] user = new String[4];
        
        String query = "SELECT userid, passwords, userlevel, username FROM users WHERE userid=? AND passwords=?"
                + " AND status=?";
        
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, userid);
            ps.setString(2, password);
            ps.setString(3, "Approved");
            ResultSet rs = ps.executeQuery();
            
            if(rs.next())
            {
                user[0] = rs.getString(1);
                user[1] = rs.getString(2);
                user[2] = rs.getString(3);
                user[3] = rs.getString(4);
            }
            else
            {
                user[2] = "NULL";
            }
            con.close();
        }
        
        catch(SQLException ex)
        {
            System.out.print(ex);
        }
        
        return user;
    }
    
    // autogenerated id
    public static String getLastID()
    {
        String userid = "";
        
        String query = "SELECT * FROM users ORDER BY userid DESC LIMIT 1";
        
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            
            while(rs.next())
            {
                userid = rs.getString(1);
            }
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        
        return userid;
    }
    
    public static int registerUser(users u)
    {
        int status = 0;
        
        String query = "INSERT INTO users VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, u.getUserid());
            ps.setString(2, u.getUsername());
            ps.setString(3, u.getPasswords());
            ps.setString(4, u.getFname());
            ps.setString(5, u.getLname());
            ps.setString(6, u.getGender());
            ps.setString(7, u.getEmail());
            ps.setInt(8, u.getPhonenum());
            ps.setString(9, u.getUserlevel());
            ps.setString(10, u.getStatus());
            ps.setString(11, u.getAddress());
            status = ps.executeUpdate();
            con.close();
        }
        
        catch(SQLException e)
        {
            System.out.println(e);
        }
        
        return status;
    }
    
    public static int updateUser(users u)
    {
        int status = 0;
        String query = "UPDATE users SET username=?, passwords=?, fname=?,"
                    + " lname=?, gender=?, email=?, phonenum=?, address=?"
                    + " WHERE userid=?";
        System.out.print(u.getPhonenum());
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, u.getUsername());
            ps.setString(2, u.getPasswords());
            ps.setString(3, u.getFname());
            ps.setString(4, u.getLname());
            ps.setString(5, u.getGender());
            ps.setString(6, u.getEmail());
            ps.setInt(7, u.getPhonenum());
            ps.setString(8, u.getAddress());
            ps.setString(9, u.getUserid());
            status = ps.executeUpdate();
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return status;
    }
    
    //admin read requested register user
    public static ArrayList<users> getRequestedUser()
    {
        ArrayList<users> userlist = new ArrayList<>();
        String query = "SELECT * FROM users WHERE userlevel!=?";
        
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, "Admin");
            ResultSet rs = ps.executeQuery();
            while(rs.next())
            {
                users u = new users();
                u.setUserid(rs.getString("userid"));
                u.setUsername(rs.getString("username"));
                u.setPasswords(rs.getString("passwords"));
                u.setFname(rs.getString("fname"));
                u.setLname(rs.getString("lname"));
                u.setGender(rs.getString("gender"));
                u.setStatus(rs.getString("status"));
                u.setUserlevel(rs.getString("userlevel"));
                u.setEmail(rs.getString("email"));
                u.setPhonenum(Integer.parseInt(rs.getString("phonenum")));
                u.setAddress(rs.getString("address"));
                userlist.add(u);
            }
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        
        return userlist;
    }
    
    public static int approveRegister(String id)
    {
        String query = "UPDATE users SET status=? WHERE userid=?";
        int status = 0;
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, "Approved");
            ps.setString(2, id);
            status = ps.executeUpdate();
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return status;
    }

    public static int rejectRegister(String id)
    {
        String query = "UPDATE users SET status=? WHERE userid=?";
        int status = 0;
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, "Rejected");
            ps.setString(2, id);
            status = ps.executeUpdate();
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return status;
    }   

    /*Delete User*/
    public static int deleteRegister(String id)
    {
        String query = "DELETE FROM users WHERE userid=?";
        int status = 0;
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, id);
            status = ps.executeUpdate();
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return status;
    }     
    
    public static users getSelectedUser(String id)
    {
        String query = "SELECT * FROM users WHERE userid=?";
        users u = null;
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();
            while(rs.next())
            {
                u = new users();
                u.setUserid(rs.getString("userid"));
                u.setUsername(rs.getString("username"));
                u.setPasswords(rs.getString("passwords"));
                u.setFname(rs.getString("fname"));
                u.setLname(rs.getString("lname"));
                u.setGender(rs.getString("gender"));
                u.setStatus(rs.getString("status"));
                u.setUserlevel(rs.getString("userlevel"));
                u.setEmail(rs.getString("email"));
                u.setPhonenum(Integer.parseInt(rs.getString("phonenum")));
                u.setAddress(rs.getString("address"));

            }
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return u;
    }    
    
    //add data to select 
    public static String getLecturerList()
    {
        String query = "SELECT * FROM users WHERE userlevel=?";
        String select = "";
        
        select +="<select name='supervisor'>";
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, "Lecturer");
            ResultSet rs = ps.executeQuery();
            while(rs.next())
            {
                student s = new student();
                s.setSupervisorid(rs.getString("userid"));
                s.setUsername(rs.getString("username"));
                
                select += "<option value="+s.getSupervisorid()+">";
                    select += s.getUsername();
                select += "</option>";
            }
            select += "</select>";
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return select;
    }
   
    public static String getStudentList()
    {
        String query = "SELECT * FROM users WHERE userlevel=?";
        String select = "";
        
        select +="<select name='supervise'>";
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, "Student");
            ResultSet rs = ps.executeQuery();
            while(rs.next())
            {
                lecturer l = new lecturer();
                l.setSupervise(rs.getString("userid"));
                l.setUsername(rs.getString("username"));
                
                select += "<option value="+l.getSupervise()+">";
                    select += l.getUsername();
                select += "</option>";
            }
            select += "</select>";
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return select;
    }    
    
    /*insert data into fyp table*/
    public static int registerFYP(fyp f)
    {
        String query = "INSERT INTO fyp(superviseid, supervisionid, program, faculty) "
                     + "VALUES(?, ?, ?, ?)";
        int status = 0;
        
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, f.getSuperviseid());
            ps.setString(2, f.getSuperivorid());
            ps.setString(3, f.getProgram());
            ps.setString(4, f.getFaculty());
            ps.executeUpdate();
            status = 1;
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        
        return status;       
    }
    
      /*Manage FYp*/
    
    public static ArrayList<fyp> viewFYP()
    {
        ArrayList<fyp> user = new ArrayList<>();
        String query = "SELECT A.fypid, A.supervisionid, B.username, A.superviseid, C.username, A.faculty, A.program "
                + "FROM fyp AS A "
                + "INNER JOIN users AS B ON A.supervisionid = B.userid "
                + "INNER JOIN users AS C ON A.superviseid = C.userid";
        
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            while(rs.next())
            {
                fyp s = new fyp();
                s.setFypid(Integer.parseInt(rs.getString(1)));
                s.setSuperivorid(rs.getString(2));
                s.setSupervisorname(rs.getString(3));
                s.setSuperviseid(rs.getString(4));
                s.setSupervisename(rs.getString(5));
                s.setFaculty(rs.getString(6));
                s.setProgram(rs.getString(7));
                user.add(s);
            }
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        
        return user;
    }

    public static fyp getindividualFYP(String id)
    {
        fyp s = null;
        String query = "SELECT A.fypid, A.supervisionid, B.username, A.superviseid, C.username, A.faculty, A.program "
                + "FROM fyp AS A "
                + "INNER JOIN users AS B ON A.supervisionid = B.userid "
                + "INNER JOIN users AS C ON A.superviseid = C.userid "
                + "WHERE A.superviseid=?";
        
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();
            while(rs.next())
            {
                s = new fyp();
                s.setFypid(Integer.parseInt(rs.getString(1)));
                s.setSuperivorid(rs.getString(2));
                s.setSupervisorname(rs.getString(3));
                s.setSuperviseid(rs.getString(4));
                s.setSupervisename(rs.getString(5));
                s.setFaculty(rs.getString(6));
                s.setProgram(rs.getString(7));
            }
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        
        return s;
    }

    public static ArrayList<fyp> getAllFYP(String id)
    {
        ArrayList<fyp> f = new ArrayList<>();
        fyp s = null;
        String query = "SELECT A.fypid, A.supervisionid, B.username, A.superviseid, C.username, A.faculty, A.program "
                + "FROM fyp AS A "
                + "INNER JOIN users AS B ON A.supervisionid = B.userid "
                + "INNER JOIN users AS C ON A.superviseid = C.userid "
                + "WHERE A.supervisionid=?";
        
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();
            while(rs.next())
            {
                s = new fyp();
                s.setFypid(Integer.parseInt(rs.getString(1)));
                s.setSuperivorid(rs.getString(2));
                s.setSupervisorname(rs.getString(3));
                s.setSuperviseid(rs.getString(4));
                s.setSupervisename(rs.getString(5));
                s.setFaculty(rs.getString(6));
                s.setProgram(rs.getString(7));
                f.add(s);
            }
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        
        return f;
    }
    
    /*Delete FYP*/
    public static int deleteFYP(String id)
    {
        String query = "DELETE FROM fyp WHERE fypid=?";
        int status = 0;
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, id);
            status = ps.executeUpdate();
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return status;
    }
    
    public static fyp getSelectedFYP(int id)
    {
        fyp f = new fyp();
        String query = "SELECT * FROM fyp WHERE fypid=?";
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setInt(1, id);
            ResultSet rs = ps.executeQuery();
            while(rs.next())
            {
                f.setFypid(Integer.parseInt(rs.getString("fypid")));
                f.setSuperviseid(rs.getString("superviseid"));
                f.setSuperivorid(rs.getString("supervisionid"));
                f.setProgram(rs.getString("program"));
                f.setFaculty(rs.getString("faculty"));
            }
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return f;
    }
    
    public static int updateFYP(fyp f)
    {
        String query = "UPDATE fyp SET superviseid=?, supervisionid=?, program=?, faculty=? WHERE fypid=?";
        int status = 0;
        try
        {
            con=connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1,f.getSuperviseid());
            ps.setString(2, f.getSuperivorid());
            ps.setString(3, f.getProgram());
            ps.setString(4, f.getFaculty());
            ps.setInt(5, f.getFypid());
            ps.executeUpdate();
            status = 1;
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return status;
    }
    
    public static booking getbookingTitle(int i)
    {
        String id = ""+i;
        booking b = null;
        String query = "SELECT A.bookingid, A.fypid, A.title, A.bookingdate, A.status, A.notes "
                + ", B.supervisionid, C.username, B.superviseid, D.username "
                + "FROM booking AS A "
                + "INNER JOIN fyp AS B ON A.fypid = B.fypid "
                + "INNER JOIN users AS C ON B.supervisionid = C.userid "
                + "INNER JOIN users AS D ON B.superviseid = D.userid "
                + "WHERE A.fypid=?";
        
        if(!id.equals(null))
        {
            try 
            {
                con = connection.ConnectNow();
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, id);
                ResultSet rs = ps.executeQuery();
                while(rs.next())
                {
                    b = new booking();
                    b.setBookingid(Integer.parseInt(rs.getString(1)));
                    b.setFypid(Integer.parseInt(rs.getString(2)));
                    b.setTitle(rs.getString(3));
                    b.setBookingdate(rs.getString(4));
                    b.setStatus(rs.getString(5));
                    b.setNotes(rs.getString(6));
                    b.setSupervisorid(rs.getString(7));
                    b.setSupervisorname(rs.getString(8));
                    b.setStudentid(rs.getString(9));
                    b.setStudentname(rs.getString(10));
                                 
                }
                con.close();
            }
            catch(SQLException e)
            {
                System.out.println(e);
            }
        }
        else
        {
            b = null;
        }

        return b;
    }
    
    /*book title*/
    public static int bookTitle(booking b)
    {
        int status = 0;
        String query = "INSERT INTO booking(fypid, title, notes, status, bookingdate) "
                + "VALUES(?, ?, ?, ?, ?)";
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/YYYY");
	LocalDate localDate = LocalDate.now(); 
        try
        {
            
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setInt(1, b.getFypid());
            ps.setString(2, b.getTitle());
            ps.setString(3, b.getNotes());
            ps.setString(4, "Pending");
            ps.setString(5, dtf.format(localDate));
            status = ps.executeUpdate();           
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println();
        }
        return status;
    }
    
    /*Get All supervise title*/
    public static ArrayList<booking> getsuperviseTitle(String id)
    {
        ArrayList<booking> ab = null;
        String query = "SELECT A.bookingid, A.fypid, A.title, A.bookingdate, A.status, A.notes "
                + ", B.supervisionid, C.username, B.superviseid, D.username "
                + "FROM booking AS A "
                + "INNER JOIN fyp AS B ON A.fypid = B.fypid "
                + "INNER JOIN users AS C ON B.supervisionid = C.userid "
                + "INNER JOIN users AS D ON B.superviseid = D.userid "
                + "WHERE B.supervisionid=?";
        
        if(!id.equals(null))
        {
            ab = new ArrayList<>();
            try 
            {
                con = connection.ConnectNow();
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, id);
                ResultSet rs = ps.executeQuery();
                while(rs.next())
                {
                    booking b = new booking();
                    b.setBookingid(Integer.parseInt(rs.getString(1)));
                    b.setFypid(Integer.parseInt(rs.getString(2)));
                    b.setTitle(rs.getString(3));
                    b.setBookingdate(rs.getString(4));
                    b.setStatus(rs.getString(5));
                    b.setNotes(rs.getString(6));
                    b.setSupervisorid(rs.getString(7));
                    b.setSupervisorname(rs.getString(8));
                    b.setStudentid(rs.getString(9));
                    b.setStudentname(rs.getString(10));;
                    ab.add(b);
                }
                con.close();
            }
            catch(SQLException e)
            {
                System.out.println(e);
            }
        }
        else
        {
            ab = null;
        }

        return ab;
    }    
    
    public static booking getbookTitle(int i)
    {
        String id = ""+i;
        booking b = null;
        String query = "SELECT A.bookingid, A.fypid, A.title, A.bookingdate, A.status, A.notes "
                + ", B.supervisionid, C.username, B.superviseid, D.username "
                + "FROM booking AS A "
                + "INNER JOIN fyp AS B ON A.fypid = B.fypid "
                + "INNER JOIN users AS C ON B.supervisionid = C.userid "
                + "INNER JOIN users AS D ON B.superviseid = D.userid "
                + "WHERE A.bookingid=?";
        
        if(!id.equals(null))
        {
            try 
            {
                con = connection.ConnectNow();
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, id);
                ResultSet rs = ps.executeQuery();
                while(rs.next())
                {
                    b = new booking();
                    b.setBookingid(Integer.parseInt(rs.getString(1)));
                    b.setFypid(Integer.parseInt(rs.getString(2)));
                    b.setTitle(rs.getString(3));
                    b.setBookingdate(rs.getString(4));
                    b.setStatus(rs.getString(5));
                    b.setNotes(rs.getString(6));
                    b.setSupervisorid(rs.getString(7));
                    b.setSupervisorname(rs.getString(8));
                    b.setStudentid(rs.getString(9));
                    b.setStudentname(rs.getString(10));
                                 
                }
                con.close();
            }
            catch(SQLException e)
            {
                System.out.println(e);
            }
        }
        else
        {
            b = null;
        }

        return b;
    }
    
    public static int approveBook(int id, String reason)
    {
        String query = "UPDATE booking SET notes=?, status=? WHERE bookingid=?";
        int status = 0;
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, reason);
            ps.setString(2, "Approved");
            ps.setInt(3, id);
            status = ps.executeUpdate();
            System.out.println(id);
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return status;
    }

    public static int rejectBook(int id, String reason)
    {
        String query = "UPDATE booking SET notes=?, status=? WHERE bookingid=?";
        int status = 0;
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, reason);
            ps.setString(2, "Rejected");
            ps.setInt(3, id);
            status = ps.executeUpdate();
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return status;
    }       

    public static int deleteBook(String id)
    {
        String query = "DELETE FROM booking WHERE bookingid=?";
        int status = 0;
        try
        {
            con = connection.ConnectNow();
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, id);
            status = ps.executeUpdate();
            con.close();
        }
        catch(SQLException e)
        {
            System.out.println(e);
        }
        return status;
    }    
     /*Get All approved title*/
    
    public static ArrayList<booking> getapproveTitle()
    {
        ArrayList<booking> ab = null;
        String query = "SELECT A.bookingid, A.fypid, A.title, A.bookingdate, A.status, A.notes "
                + ", B.supervisionid, C.username, B.superviseid, D.username "
                + "FROM booking AS A "
                + "INNER JOIN fyp AS B ON A.fypid = B.fypid "
                + "INNER JOIN users AS C ON B.supervisionid = C.userid "
                + "INNER JOIN users AS D ON B.superviseid = D.userid "
                + "WHERE A.status=?";
        
            ab = new ArrayList<>();
            try 
            {
                con = connection.ConnectNow();
                PreparedStatement ps = con.prepareStatement(query);
                ps.setString(1, "Approved");
                ResultSet rs = ps.executeQuery();
                while(rs.next())
                {
                    booking b = new booking();
                    b.setBookingid(Integer.parseInt(rs.getString(1)));
                    b.setFypid(Integer.parseInt(rs.getString(2)));
                    b.setTitle(rs.getString(3));
                    b.setBookingdate(rs.getString(4));
                    b.setStatus(rs.getString(5));
                    b.setNotes(rs.getString(6));
                    b.setSupervisorid(rs.getString(7));
                    b.setSupervisorname(rs.getString(8));
                    b.setStudentid(rs.getString(9));
                    b.setStudentname(rs.getString(10));;
                    ab.add(b);
                }
                con.close();
            }
            catch(SQLException e)
            {
                System.out.println(e);
            }

        return ab;
    }    
}
